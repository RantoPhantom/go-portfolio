// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const get_items = `-- name: Get_items :many
select item_id, list_id, content, date_created, is_done
from todo_items
where list_id = ?
`

// -----items-------
func (q *Queries) Get_items(ctx context.Context, listID int64) ([]TodoItem, error) {
	rows, err := q.db.QueryContext(ctx, get_items, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TodoItem
	for rows.Next() {
		var i TodoItem
		if err := rows.Scan(
			&i.ItemID,
			&i.ListID,
			&i.Content,
			&i.DateCreated,
			&i.IsDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_list_info = `-- name: Get_list_info :one
;

select list_id, list_name, icon_color, date_created
from lists
where list_id = ?
`

func (q *Queries) Get_list_info(ctx context.Context, listID int64) (List, error) {
	row := q.db.QueryRowContext(ctx, get_list_info, listID)
	var i List
	err := row.Scan(
		&i.ListID,
		&i.ListName,
		&i.IconColor,
		&i.DateCreated,
	)
	return i, err
}

const get_lists = `-- name: Get_lists :many
;

select list_id, list_name, icon_color, date_created
from lists
`

// -----lists-------
func (q *Queries) Get_lists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, get_lists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(
			&i.ListID,
			&i.ListName,
			&i.IconColor,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const get_password = `-- name: Get_password :one
select password_hash
from user_info
`

// ----user_info-----
func (q *Queries) Get_password(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, get_password)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const insert_item = `-- name: Insert_item :exec
;

INSERT INTO todo_items(list_id, content, date_created)
VALUES(?,?,?)
`

type Insert_itemParams struct {
	ListID      int64
	Content     string
	DateCreated time.Time
}

func (q *Queries) Insert_item(ctx context.Context, arg Insert_itemParams) error {
	_, err := q.db.ExecContext(ctx, insert_item, arg.ListID, arg.Content, arg.DateCreated)
	return err
}

const insert_list = `-- name: Insert_list :one
;

insert into lists(list_name, icon_color)
values (?,?)
returning list_id
`

type Insert_listParams struct {
	ListName  string
	IconColor string
}

func (q *Queries) Insert_list(ctx context.Context, arg Insert_listParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insert_list, arg.ListName, arg.IconColor)
	var list_id int64
	err := row.Scan(&list_id)
	return list_id, err
}

const insert_user_info = `-- name: Insert_user_info :exec
;

insert into user_info(password_hash, date_created)
values(?,?)
`

type Insert_user_infoParams struct {
	PasswordHash string
	DateCreated  time.Time
}

func (q *Queries) Insert_user_info(ctx context.Context, arg Insert_user_infoParams) error {
	_, err := q.db.ExecContext(ctx, insert_user_info, arg.PasswordHash, arg.DateCreated)
	return err
}

const remove_item = `-- name: Remove_item :exec
delete from todo_items
where item_id = ? and list_id = ?
`

type Remove_itemParams struct {
	ItemID int64
	ListID int64
}

func (q *Queries) Remove_item(ctx context.Context, arg Remove_itemParams) error {
	_, err := q.db.ExecContext(ctx, remove_item, arg.ItemID, arg.ListID)
	return err
}

const remove_list = `-- name: Remove_list :exec
delete from lists
where list_id = ?
`

func (q *Queries) Remove_list(ctx context.Context, listID int64) error {
	_, err := q.db.ExecContext(ctx, remove_list, listID)
	return err
}

const rename_list = `-- name: Rename_list :exec
;

update lists
set list_name=?
where list_id=?
`

type Rename_listParams struct {
	ListName string
	ListID   int64
}

func (q *Queries) Rename_list(ctx context.Context, arg Rename_listParams) error {
	_, err := q.db.ExecContext(ctx, rename_list, arg.ListName, arg.ListID)
	return err
}
